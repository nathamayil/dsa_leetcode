Two Sum

Problem Statement:

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1] 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.
Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?

Explanation :
1) The first step is to create a hashmap with integers as the key and value. Then create a for loop to iterate through each element. 
2) The goal is to find if the number in the hashmap corresponds to the target sum - current value, so through each iteration, we should check if the (number in hashmap = target sum - current value)
3) If it present, we will return the output as (index of the required number, index of the current number)
4) If not present, the current number and it's index is taken as the key and value and passed through the iteration until the answer is obtained

Time and Space Complexity : O(N)


Java Solution :

class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> numToIndex=new HashMap<Integer, Integer>();
        for(int i=0;i<nums.length;i++){
          Integer r1=(Integer)(target-nums[i]);
          if(numToIndex.containsKey(r1)){
            int arr[]={numToIndex.get(r1),i}; 
            return arr;}
        
            numToIndex.put(nums[i],i);}
        return null;
    }
}
